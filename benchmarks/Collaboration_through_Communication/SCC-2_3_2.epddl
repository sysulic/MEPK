(define (domain ctc2)

  (:objects
    b1 b2 - block

    p1 p2 p3 - room
  )
    
  (:agents
    a b
  )

  (:predicates  (at ?ag - agent ?p - room)
                (in ?b - block ?p - room)
  )
   
  (:action left
   :category (ontic)
   :parameters (?ag - agent)
   :precondition (K_?ag (not(at ?ag p1)) )
   :effect (<{(at ?ag p2)}
             {(and (at ?ag p1) (not (at ?ag p2)) (not (at ?ag p3))
                  (K_?ag (at ?ag p1)))} >
            <{ (at ?ag p3) }
             {(and (at ?ag p2) 
                  (K_?ag (at ?ag p2)))} >
    )
  )
  
  (:action right
   :category (ontic)
   :parameters (?ag - agent)
   :precondition (K_?ag (not(at ?ag p3)) )
   :effect (<{ (at ?ag p1) }
             {(and (at ?ag p2)
                  (K_?ag (and (at ?ag p2) (not (at ?ag p1)) (not (at ?ag p3)) )))} >
            <{ (at ?ag p2)}
             {(and (at ?ag p3)
                  (K_?ag (at ?ag p3) ))} >
    )
  )

  (:action find_room1
   :category (sensing)
   :parameters (?ag - agent ?b1 - block)
   :precondition (K_?ag (at ?ag p1)
                 )
   :observe_pos (and (in ?b1 p1) (K_?ag (in ?b1 p1)) )
   :observe_neg (and (not (in ?b1 p1)) (K_?ag (not(in ?b1 p1))) )
  )

  (:action find_room3
   :category (sensing)
   :parameters (?ag - agent ?b1 - block)
   :precondition (K_?ag (at ?ag p3)
                 )
   :observe_pos (and (in ?b1 p3) (K_?ag (in ?b1 p3)) )
   :observe_neg (and (not (in ?b1 p3)) (K_?ag (not(in ?b1 p3))) )
  )

  (:action tell
   :category (communication)
   :parameters (?ag1 - agent ?ag2 - agent ?b - block ?r - room)
   :precondition (or (K_?ag1 (in ?b ?r))
                     (K_?ag1 (not(in ?b ?r)))
                 )
   :effect (<{(K_?ag1 (in ?b ?r))} {(K_?ag2 (in ?b ?r))}>
            <{(K_?ag1 (not(in ?b ?r)))} {(K_?ag2 (not(in ?b ?r)))}>
           ) 
  )

  (:init (and (not (at a p1))
              (at a p2)
              (not (at a p3))
            
              (not (at b p1))
              (at b p2)
              (not (at b p3))

              (not (in b1 p2)) 
              (not (in b2 p2)) 
              (K_a (and (not (at a p1))
                        (at a p2)
                        (not (at a p3))          
                        (not (in b1 p2)) 
                        (not (in b2 p2))                    
                   )
              )
              (K_b (and (not (at b p1))
                        (at b p2)
                        (not (at b p3))
                        (not (in b1 p2)) 
                        (not (in b2 p2)) 
                   )
              )
          )
  )

  (:constraint (and (or (and (in b1 p1) (not (in b1 p3)) )
                        (and (not (in b1 p1)) (in b1 p3) )
                    )
                    (or (and (in b2 p1) (not (in b2 p3)) )
                        (and (not (in b2 p1)) (in b2 p3) )
                    )
                    (or (and  (at a p1) (not (at a p2)) (not (at a p3)) )
                        (and  (at a p2) (not (at a p3)) (not (at a p1)) ) 
                        (and  (at a p3) (not (at a p2)) (not (at a p1)) )
                    )
                    (or (and  (at b p1) (not (at b p2)) (not (at b p3)) )
                        (and  (at b p2) (not (at b p3)) (not (at b p1)) ) 
                        (and  (at b p3) (not (at b p2)) (not (at b p1)) )
                    )
               )
  )
  
  (:goal (and (or (K_a (in b1 p1))
                  (K_a (in b1 p3))
              )
              (or (K_b (in b2 p1))
                  (K_b (in b2 p3))
              )
         )
  )
)

(define (domain grapevine)
  (:objects
    a b c d - secret
    p1 p2 - room
  )

  (:agents
    a b c d
  )
  
  (:predicates  (at ?ag - agent ?r - room)
                (the ?se - secret)
  )
   
  (:action left
   :category (ontic)
   :parameters (?ag - agent)
   :precondition (K_?ag (at ?ag p2))
   :effect (<{(True)} { (and (K_?ag(at ?ag p1)) (K_?ag(not(at ?ag p2)))
                          (at ?ag p1) (not(at ?ag p2))) }>
           )
  )

  (:action right
   :category (ontic)
   :parameters (?ag - agent)
   :precondition (K_?ag (at ?ag p1))
   :effect (<{(True)} { (and (K_?ag(at ?ag p2)) (K_?ag(not(at ?ag p1)))
                          (at ?ag p2) (not(at ?ag p1)))}>
           )
  )
  
  (:action share
   :category (communication)
   :parameters (?ag - agent ?rk - room)
   :precondition (and (K_?ag (at ?ag ?rk)) (K_?ag (the ?ag))
                 )
   :effect (<{(at a ?rk)}
             {(K_a (the ?ag))} >
            <{(at b ?rk)}
             {(K_b (the ?ag))} >
            <{(at c ?rk)}
             {(K_c (the ?ag))} >
            <{(at d ?rk)}
             {(K_d (the ?ag))} >
          )
  )

  (:init (and (at a p1)
              (not (at a p2))
              (at b p1)
              (not (at b p2))
              (at c p1)
              (not (at c p2))
              (at d p1)
              (not (at d p2))
              (K_a (and (at a p1)
                    (not (at a p2))) )
              (K_b (and (at b p1)
                    (not (at b p2))) )
              (K_c (and (at c p1)
                    (not (at c p2))) )
              (K_d (and (at d p1)
                    (not (at d p2))) )
              (K_a (the a))
              (K_b (the b))
              (K_c (the c))
              (K_d (the d))
              (not (K_a (the d)))
              (not (K_b (the a)))
              (not (K_c (the b)))
              (not (K_d (the c)))
       )
  )

  (:constraint (True)
  )

  (:goal (and  (K_a (the b))
               (K_b (the c))
               (K_c (the d))
               (K_d (the a))
               (not (K_a (the d)))
               ; (not (K_b (the a)))
               ; (not (K_c (the b)))
               ; (not (K_d (the c)))
         )
    
  )

)

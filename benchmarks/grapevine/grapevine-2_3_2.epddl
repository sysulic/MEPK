(define (domain grapevine_a3)
  (:objects
    a
    b
    c - secret

    p1
    p2 - room

  )

  (:agents
    a
    b
    c
  )

  (:predicates  (at ?ag - agent ?r - room)
                (the ?se - secret)
  )
   
  (:action left
   :category (ontic)
   :parameters (?ag - agent)
   :precondition (K_?ag (at ?ag p2))
   :effect (
            <{(True)} { (and (K_?ag(at ?ag p1)) (K_?ag(not(at ?ag p2)))
                          (at ?ag p1) (not(at ?ag p2))) }>
          )
  )

  (:action right
   :category (ontic)
   :parameters (?ag - agent)
   :precondition (K_?ag (at ?ag p1))
   :effect (
            <{(True)} { (and (K_?ag(at ?ag p2)) (K_?ag(not(at ?ag p1)))
                          (at ?ag p2) (not(at ?ag p1)))}>
          )
  )
  
  (:action share
   :category (communication)
   :parameters (?ag - agent ?x - agent ?y - agent  ?rk - room ?rj - room)
   :precondition (and (K_?ag (at ?ag ?rk)) (K_?ag (the ?ag))
                 )
   :effect (<{(and (at ?x ?rk)     
                  (at ?y ?rk) )               
                 }
             {(and (K_?x (the ?ag))
                  (K_?y (the ?ag))       
                  (K_?ag (K_?x (the ?ag)))
                  (K_?ag (K_?y (the ?ag)))  )             
                  } >
            
            
            <{(and (at ?x ?rk)    
                 (at ?y ?rj)  )   }                   
             {(and 
             (K_?x (the ?ag))
             (K_?ag (K_?x (the ?ag))))
         
             
             } >         
            <{(and (not (at ?x ?rk))
                  (at ?x ?rj)  
                  (at ?y ?rj)   )        
                }
             {(K_?ag (the ?ag))} >
          )
  )

  (:init (and (at a p1)
              (not (at a p2))
              (at b p1)
              (not (at b p2))
              (at c p1)
              (not (at c p2))
              (K_a (and (at a p1)
                    (not (at a p2))) )
              (K_b (and (at b p1)
                    (not (at b p2))) )
              (K_c (and (at c p1)
                    (not (at c p2))) )      
              (K_a (the a))
              (K_b (the b))
              (K_c (the c))   
              (not (K_b (the a)))
              (not (K_c (the a)))
       )
  )

  (:constraint (True)
  )

  (:goal (and  (K_b (the a))
               (K_a (K_b (the a)))
               (not (K_c (the a)))
        )
  )
)